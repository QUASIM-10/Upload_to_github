cd : change directory
mkdir : make directory
ls : list/view items in the current directory you are.
ls -Force : TO view/list ALL Hidden files in the current diretory you are.
New-Item -Path . -Name "filename.js" -ItemType "file" TO CREATE A FILE INSIDE YOUR FOLDER/DIRECTORY.
code . : to open the folder you are in VISUAL STUDIO CODE.
git init : TO CREATE A git LOCAL REPOSITORY (TO initialize a git repository)
ls -Force : TO VIEW THE initialized git repository

git init : WILL BE USED TO TRACK ALL OUR CHANGES, COMMIT OUR CHANGES AND TO PERFORM VERSION CONTROL.

git status : TO SEE/VIEW WHAT IS IN THE STAGING AREA I.E the FILE you created AND IT WILL BE SHOWN IN RED COLOR.
git add "filename" : TO ADD THE file to the STAGING AREA so we can start tracking CHANGES IN IT.
git status : NOW, THE file HAS been successfully added to the STAGING AREA and we can now see it in GREEN COLOR.
git commit -m "commit message; CONVENTION IS THAT IT MUST BE IN PRESENT TENSE E.G " : TO COMMIT THE FILE(S) IN THE STAGING AREA UNDER VERSION CONTROL.
git log : TO SEE THE COMMIT YOU HAVE MADE

TO ADD MORE THAN 1 FILE:
New-Item -Path . -Name "filename1.js" -ItemType "file";New-Item -Path . -Name "filename2.js" -ItemType "file" // 2 NEW FILES WILL BE ADDED.
git status : THE 2 NEW FILES WILL BE DISPLAYED IN RED COLOR MEANING THAT THEY ARE STILL IN THE STAGING AREA.
git add . : TO ADD BOTH file1 and file 2 TO THE STAGING AREA. THIS IS USED FOR ADDING ALL THE FILES IN THE STAGING AREA INTO THE STAGING AREA, IT HELPS TO ADD ALL THE FILES INSTEAD OF JUST ADDING THEM 1 AFTER THE OTHER.
git status : TO CHECK IF THE FILES HAVE BEEN SUCCESSFULLY ADDED TO THE STAGING AREA.
git commit -m "commit message" : COMMIT THE FILES UNDER VERSION CONTROL...
git log : TO SEE THE COMMIT WE HAVE MADE.

IF PERHAPS WE MADE A CHANGE IN ONE OF OUR FILES AND WE ALREADY SAVED IT BUT WE WANT TO REVERT BACK TO THE OLD VERSION, THEN DO THIS:
git diff "filename" : TO CHECK THE DIFFERENCES BETWEEN THE CURRENT VERSION OF filename AND THE LAST SAVED POINT OF chapter3.txt IN OUR git repository.
git diff chapter3.txt : THE CURRENT VERSION IS SHOWN IN green color WHILE the OLD VERSION is shown in RED COLOR
git checkout "filename" : THIS WILL ROLLBACK THE file TO THE LAST VERSION THAT WAS COMMITED IN OUR repository.
git checkout chapter3.txt : ONCE WE CLICK ON ENTER, IT WILL REVERT BACK TO IT'S OLD VERSION
git log : TO SEE THE COMMIT MADE.

TO STAGE ALL FILES EXCEPT A PARTICULAR FILE: To add all files except chapter4.txt in Git, you can use the following commands in VS Code's terminal:
git add . ":!filename = chapter4.txt" : Stage all files except filename.
git add . ":!chapter4.txt"

HOW TO UNSTAGE A FILE:
IF YOU HAVE initiated the git and ALSO STAGED THE FILES AND YOU WANT TO undo the process:
git rm --cached -r . : THIS WILL REMOVE ALL THE STAGED FILES
git status : WE WILL SEE THAT THE FILES HAVE BEEN REMOVED AND ARE NOW SHOWING RED COLOR.

HOW TO PUSH YOUR CODE TO GITHUB:
NAVIGATE TO "New Repository", SET Repository Name and Description AND BY DEFAULT, IT will be in PUBLIC AND THIS ALLOWS ANYBODY TO SEE/ACCESS THE CODE
IGNORE THE README file and LEAVE IT UNCHECKED AND THEN CLICK ON Create repository
YOU CAN EITHER USE THEIR DESKTOP APP TO COMMIT UR CODE OR USE THE COMMAND LINE... THE COMMAND LINE PROCESS:
Copy the address of the current repository you created.
NOW GO BACK TO the working directory of the file YOU WANT TO PUSH TO GITHUB IN THE COMMAND LINE(I.E VISUAL STUDIO CODE)
NOTE: YOU MUST HAVE DONE LINE 26 - 31 BEFORE WANTING TO PUSH TO GITHUB.
git log : TO CHECK THE OREVIOUS COMMIT.
git remote add origin "address of the current github repository you created; do not include "", just https://github.com/.....  " : origin is the name of your remote and you can theoretically call it anything BUT THE CONVENTIONAL WAY IS TO USE origin
git push -u origin main/master : depending on whether urs is in main or master
// depending on the size of the folder you want to push to github, this can take various amount of time.
// Now, head over to github and refresh the page, then we can now see our files hosted on GITHUB.

HOW TO USE .gitignore : FOR CHOOSING FILES NOT TO TRACK(put on github) E.G PASSWORDS, SECURITY, AUTHENTICATION E.T.C:
USE THE New-Item -Path . -Name ".gitignore" -ItemType "file" TO CREATE A .gitignore FILE
code .gitignore : USE IT TO OPEN THE FILE AND THEN ADD THE FILES YOU DON'T WANT TO PUSH TO GITHUB :: just type filename.txt(filename.filetype) e.g secrets.txt
    secrets.txt
    file.js
    passwordServer.js E.T.C in your .gitignore FILE
git add .
git status
git commit -m "Initial Commit"
AND FROM HERE, WHEN WE PUSH TO GITHUB, THEN THE FILES IN THE .gitignore FILE WILL NOT BE DISPLAYED


GIT PRACTICE WITH node.js: HOW TO ADD A .gitignore FILE TO OUR NODE PROJECT
npm i : TO INSTALL ALL THE PACKAGES FOUND IN package.json FILE
USE THE New-Item -Path . -Name ".gitignore" -ItemType "file" TO CREATE A .gitignore FILE CREATE A .gitignore file IN YOUR node project file 
code .gitignore : TO OPEN THE FILE AND PROCEED TO ADDING THE FILES YOU DO NOT WANT TO DISPLAY IN YOUR github repository
SEARCH FOR "https://github.com/github/gitignore" ON GOOGLE AND THEN NAVIGATE TO Node.gitignore AND THEN COPY THE pre-built template code 
THEN PASTE IT IN THE .gitignore file YOU CREATED AND THEN YOU CAN ALSO ADD SOME FILES(IF THEY ARE NOT PRESENT ALREADY IN THE CODE YOU COPIED) TO THE .gitignore file(ADD THE FILE: JUST THE NAME OF THE FILE . TYPE OF THE FILE AS EXPLAINED ABOVE)
git init
git add .
git status
git commit -m "Initial commit"
AND NOW GO ON AND ADD ALL THIS TO YOUR GITHUB REPOITORY AND THEN YOU WILL SEE THAT THE FILES IN .gitignore ARE NOT DISPLAYED IN YOUR REPOSITORY.